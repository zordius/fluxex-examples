{
  "name": "fluxex",
  "version": "0.1.11-6",
  "description": "An extended Flux implement to build isomorphic javascript React app.",
  "author": {
    "name": "Zordius",
    "email": "zordius@yahoo-inc.com"
  },
  "contributors": [
    {
      "name": "Zordius Chen",
      "email": "zordius@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/zordius/fluxex.git"
  },
  "keywords": [
    "flux",
    "react",
    "context",
    "fluxible",
    "isomorphic",
    "lighweight",
    "starter"
  ],
  "scripts": {
    "test": "mocha",
    "smoke_test": "gulp smoke_test",
    "example_tests": "gulp example_tests",
    "build_doc": "gulp build_document",
    "watch_doc": "gulp watch_document",
    "coverage": "istanbul cover -- _mocha",
    "lint": "jshint"
  },
  "bin": {
    "fluxex_starter": "./starter.sh"
  },
  "main": "index.js",
  "dependencies": {
    "eventemitter2": "0.4.14",
    "json-path-processor": "0.2.2",
    "with-promise": "0.0.2"
  },
  "devDependencies": {
    "bluebird": "2.5.2",
    "object.assign": "1.1.1",
    "gulp": "3.8.10",
    "gulp-shell": "0.2.11",
    "jsdoc": "3.3.0-alpha11",
    "semver": "4.1.0",
    "escape-regexp": "0.0.1",
    "chai": "1.10.0",
    "istanbul": "0.3.5",
    "jshint": "2.5.10",
    "mocha": "2.0.1",
    "react": "0.12.2",
    "sinon": "1.12.1"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "bugs": {
    "url": "https://github.com/zordius/fluxex/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/zordius/fluxex/blob/master/LICENSE.txt"
    }
  ],
  "gitHead": "e4c1d0a1f7cea31d815984ff3d9516a8385baa86",
  "readme": "FluxEx\n======\n\nAn extended Flux implement to build isomorphic javascript React app.\n\n[![npm version](https://img.shields.io/npm/v/fluxex.svg)](https://www.npmjs.org/package/fluxex) [![npm download](https://img.shields.io/npm/dm/fluxex.svg)](https://www.npmjs.org/package/fluxex) [![Dependency Status](https://david-dm.org/zordius/fluxex.svg)](https://david-dm.org/zordius/fluxex) [![Build Status](https://travis-ci.org/zordius/fluxex.svg?branch=master)](https://travis-ci.org/zordius/fluxex) [![Test Coverage](https://codeclimate.com/github/zordius/fluxex/badges/coverage.svg)](https://codeclimate.com/github/zordius/fluxex) [![Code Climate](https://codeclimate.com/github/zordius/fluxex/badges/gpa.svg)](https://codeclimate.com/github/zordius/fluxex) [![License](https://img.shields.io/badge/license-MIT-green.svg)](LICENSE.txt)\n\n<img src=\"https://github.com/zordius/fluxex/raw/master/examples/00hello/badge.png\" />\n\nFeatures\n--------\n\n**All in one Starter**\n\n<a href=\"https://github.com/zordius/fluxex/blob/master/extra/gulpfile.js\"><img src=\"https://github.com/zordius/fluxex/raw/master/gulp_starter.jpg\" /></a>\n\n**Everything in React**\n\n<a href=\"https://github.com/zordius/fluxex/blob/master/examples/04-infinite-scroll/components/Html.jsx\"><img src=\"https://github.com/zordius/fluxex/raw/master/start_from_html.jpg\" /></a>\n\n**Minimal context APIs**\n\nTo understand Flux, you only need to learn these APIs: `this.executeAction()`, `this.getStore()`, `this.dispatch()` !\n\n* `this.executeAction()` or `this.getStore(name)` in components.\n* `this.dispatch()` or `this.executeAction()` or `this.getStore(name)` in actions.\n* `this.emitChange()` or `this.get()` or `this.set()` in stores.\n\n<hr/>\n\n* [CORE] Super lightweight, less than 250 lines of code.\n* [CORE] Context based flux system.\n* [CORE] React Server side rendering + client mount.\n* [CORE] HTML as top level react component, no need container.\n* [EXTRA] express middleware to serve the fluxex application.\n* [EXTRA] full integrated gulp task for development.\n* [EXTRA] pjax support.\n* [EXTRA] request and wrapped request service support.\n\nSee the FluxEx Magic\n--------------------\n\n* Check <a href=\"https://github.com/zordius/fluxex/tree/master/examples\">example projects</a> you can see how fluxex do server side rendering + context deliver + Full HTML react rendering!\n* No more index.html. Start with <a href=\"https://github.com/strongloop/express\">npm:express</a> and your Html.jsx!\n* No more AJAX, all http request by <a href=\"https://github.com/request/request\">npm:request</a>!\n\n```html\n// This is the magic in the Html.jsx !!\n<script dangerouslySetInnerHTML={{__html: this.getInitScript()}}></script>\n```\n\nStart from Scratch\n------------------\n\nRead <a href=\"https://github.com/zordius/fluxex/blob/master/SCRATCH.md\">Start from Scratch</a> to know how to create a fluxex application!\n\nQuick Start\n-----------\n\n**Prepare your project**\n```sh\nnpm init\nnpm install fluxex\n```\n\n**Use the Starter template**\n```sh\nnode_modules/.bin/fluxex_starter\n```\n\n**Start the Server**\n```sh\nnode_modules/.bin/gulp develop\n```\n\n* Connect to http://localhost:3001/search?q=pizza\n* You can start your development now, gulp handled everything (jshint, browserify, nodemon, restart, browser-sync).\n* Put your actions, stores and components into correspond directories.\n* Edit components/Html.jsx to include your React components.\n* Edit actions/routing.js to add routing.\n* Edit fluxexapp.js to add your store.\n\nDifference with Flux\n--------------------\n\nFluxEx is context based flux implemention. Server side react rendering can be done easy when the flux is scoped under a request based context. Store and dispatcher are singletons in <a href=\"https://github.com/facebook/flux\">Facebook flux</a>, but in fluxex they are not.\n\n<hr/>\n**Fluxex**\n* Fluxex is an instance, it is constructed by provided context.\n* Fluxex can be serialized by `.toString()` and reconstructed by the serialized string. All server side store status can be transfered to client side by this way.\n* use the static `.createApp()` to create a Fluxex application.\n\n```javascript\nvar myApp = require('fluxex').createApp({\n    product: require('./stores/product')\n}, process.cwd() + '/components/Html.jsx');\n```\n\n<hr/>\n**Action**\n* An action creator should return a promise.\n* An action creator function can be executed by `.executeAction()`.\n* When the action be `.executeAction()`, the Fluxex instance can be referenced by `this`.\n* `.executeAction()` will return a promise, so you can manage asynchronous actions in promise way.\n\n```javascript\n// inside a component, requires Fluxex.mixin\n...\nonStoreChange: function () {\n    return this.getStore('myStore').getSomething();\n},\nhandleClick: function () {\n    this.executeAction(myAction, payload);  // this returns a promise\n}\n```\n\n<hr/>\n**Dispatcher**\n* the Fluxex instance itself is a dispatcher with `.dispatch()` method.\n* the dispatched `FOOBAR` action will trigger all `handle_FOOBAR` method of all stores. When there is no `handle_FOOBAR` method in any store, an error will be throw.\n\n```javascript\n// myAction\nvar myAction = function (payload) {\n    ... do your tasks ....\n    return this.dispatch('UPDATE_SOMETHING', ....); // this returns a promise\n}\n```\n\n<hr/>\n**Store**\n* Store is an instance, it is constructed by serialized status.\n* Store is created by a Fluxex.\n* Use `.getStore(name)` to get the store by name.\n* You can `.get()` and `.set()` by simple json path. Ex: `this.set('a.b.c', 123)`\n* Everything you `.set()` can be serialized by `.toString()` and be tracked by your Fluxex application.\n\n```javascript\nvar myStore = {\n    // handle this.dispatch('UPDATE_SOMETHING', ....)\n    handle_UPDATE_SOMETHING: function (payload) {\n        this.set('data', payload); // There are .get() and .set() in all stores\n        this.emitChange();\n    }\n}\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/zordius/fluxex",
  "_id": "fluxex@0.1.11-6",
  "_shasum": "e59b5fee7a2d4614e9475fc7293dd2c5ed6421a7",
  "_from": "../.."
}
